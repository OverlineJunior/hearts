[{"title":"Hearts","type":0,"sectionRef":"#","url":"api/Hearts","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Hearts","url":"api/Hearts#types","content":" "},{"title":"Data​","type":1,"pageTitle":"Hearts","url":"api/Hearts#Data","content":"&lt;/&gt; type Data = {[any]: any?} Optional table that can be passed to Hearts.Damage and Hearts.Heal's third parameter, which is then passed to modifiers and the Hearts.HumanoidDamaged and Hearts.HumanoidHealed events. -- myHumanoid is now a hedgehog, every humanoid that damages it now takes half of that damage. Hearts.HumanoidDamaged:Connect(function(target: Humanoid, damage: number, data: Hearts.Data) if target == myHumanoid and data.Source then Hearts.Damage(data.Source, damage / 2) end end) Hearts.Damage(myHumanoid, 20, { Source = enemyHumanoid, })  "},{"title":"Properties​","type":1,"pageTitle":"Hearts","url":"api/Hearts#properties","content":" "},{"title":"HumanoidDamaged​","type":1,"pageTitle":"Hearts","url":"api/Hearts#HumanoidDamaged","content":"Event &lt;/&gt; Hearts.HumanoidDamaged: Signal&lt;Humanoid, number,Data&gt;   "},{"title":"HumanoidHealed​","type":1,"pageTitle":"Hearts","url":"api/Hearts#HumanoidHealed","content":"Event &lt;/&gt; Hearts.HumanoidHealed: Signal&lt;Humanoid, number,Data&gt;  "},{"title":"Functions​","type":1,"pageTitle":"Hearts","url":"api/Hearts#functions","content":" "},{"title":"Damage​","type":1,"pageTitle":"Hearts","url":"api/Hearts#Damage","content":"&lt;/&gt; Hearts.Damage( target: Humanoid , amount: number, data: Data? ) → () Removes health from the target, accepting an optional data table (empty if not given) that will be passed to modifiers and the Hearts.HumanoidDamaged event.  "},{"title":"Heal​","type":1,"pageTitle":"Hearts","url":"api/Hearts#Heal","content":"&lt;/&gt; Hearts.Heal( target: Humanoid , amount: number, data: Data? ) → () Adds health to the target, accepting an optional data table (empty if not given) that will be passed to modifiers and the Hearts.HumanoidHealed event.  "},{"title":"AddModifier​","type":1,"pageTitle":"Hearts","url":"api/Hearts#AddModifier","content":"&lt;/&gt; Hearts.AddModifier( target: Humanoid , modifierFn: ( number, Data ) → number? ) → number Adds a function that will be called everytime target is either damaged or healed, capable of modifying the health change by returning a different value (remaining the same if nothing is returned). Multiple can be used and all are automatically garbage collected when the target is destroyed. -- For each time myHumanoid is about to be healed, double the healing. Hearts.AddModifier(myHumanoid, function(healthChange: number) -- If healthChange is positive, it means it is healing, not damaging. if healthChange &gt; 0 then return healthChange * 2 end end) -- Because of the modifier, heals 100 health. Hearts.Heal(myHumanoid, 50)   "},{"title":"AddGlobalModifier​","type":1,"pageTitle":"Hearts","url":"api/Hearts#AddGlobalModifier","content":"&lt;/&gt; Hearts.AddGlobalModifier(globalModifierFn: ( Humanoid , number, Data ) → number?) → number Similar to Hearts.AddModifier, but applies to every possible humanoid instead of a specific one. -- For every humanoid, deny letal damage. Hearts.AddGlobalModifier(function(humanoid: Humanoid, healthChange: number) -- If healthChange is damaging and letal, deny it. if humanoid.Health + healthChange &lt;= 0 then return 0 end end) -- If myHumanoid had 50 health or less, this call would be ignored because the damage would be letal. Hearts.Damage(myHumanoid, 50) Global modifiers can be useful for making sure data is sent the way our whole game expects it to be sent: Hearts.AddGlobalModifier(function(_, _, data: Hearts.Data) assert(data.Source, 'Source not defined') end) -- All good, the damage source was defined. Hearts.Damage(myHumanoid, 20, { Source = enemyHumanoid, }) -- Errors because the damage source was not defined. Hearts.Damage(myHumanoid, 20)   "},{"title":"RemoveModifier​","type":1,"pageTitle":"Hearts","url":"api/Hearts#RemoveModifier","content":"&lt;/&gt; Hearts.RemoveModifier(id: number) → () Removes a modifier by its id, which is returned by Hearts.AddModifier and Hearts.AddGlobalModifier. -- Denies every damage and heal directed to myHumanoid. local id = Hearts.AddModifier(myHumanoid, function() return 0 end) -- Denied. Hearts.Damage(myHumanoid, 50) Hearts.RemoveModifier(id) -- Deals 50 damage since the modifier no longer exists. Hearts.Damage(myHumanoid, 50)  "}]