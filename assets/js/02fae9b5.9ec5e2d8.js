"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{76647:function(n,e,a){a.r(e),a.d(e,{frontMatter:function(){return d},contentTitle:function(){return u},metadata:function(){return m},toc:function(){return c},default:function(){return s}});var t=a(87462),o=a(63366),r=(a(67294),a(3905)),i=["components"],d={},u=void 0,m={type:"mdx",permalink:"/hearts/",source:"@site/pages/index.md"},c=[],l={toc:c};function s(n){var e=n.components,a=(0,o.Z)(n,i);return(0,r.kt)("wrapper",(0,t.Z)({},l,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Simple module that expands humanoid health manipulation, such as modifying incoming damage/heal externally and passing related data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local id: number\n\nlocal function StartBlocking()\n    id = Hearts.AddModifier(myHumanoid, function(healthChange: number, data: Hearts.Data)\n        if healthChange < 0 and not data.IgnoresBlock then\n            return healthChange / 2\n        end\n    end)\nend\n\nlocal function StopBlocking()\n    Hearts.RemoveModifier(id)\nend\n\nHearts.Damage(myHumanoid, 20) --\x3e 20 dmg.\n\nStartBlocking()\n\nHearts.Damage(myHumanoid, 20) --\x3e 10 dmg.\n\nHearts.Damage(myHumanoid, 20, {\n    IgnoresBlock = true,\n}) --\x3e 20 dmg.\n")))}s.isMDXComponent=!0}}]);